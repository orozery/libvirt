From 93344aed27c686239ff53b8912eb4476be5e9ef7 Mon Sep 17 00:00:00 2001
Description: storage_file: add support to probe cluster_size from QCOW2 images
Author: Pavel Hrdina <phrdina@redhat.com>
Origin: backport, https://github.com/libvirt/libvirt/commit/93344aed27c686239ff53b8912eb4476be5e9ef7
Bug: https://gitlab.com/libvirt/libvirt/-/issues/154
Reviewed-by: Rafael David Tinoco <rafaeldtinoco@ubuntu.com>
Last-Update: 2021-05-24

storage_file: add support to probe cluster_size from QCOW2 images

From QEMU docs/interop/qcow2.txt :

   Byte  20 - 23:   cluster_bits
                    Number of bits that are used for addressing an offset
                    within a cluster (1 << cluster_bits is the cluster size).

With this patch libvirt will be able to report the current cluster_size
for all existing storage volumes managed by storage driver.

[Backport]

  Commit 2cdd833eae ("util: move virStorageFileProbe code into
  storage_file") did move the src/util/virstoragefile.c into
  storage_file/storage_file_probe.c. For backport purposes that
  move is not needed for this patch to be functional.

Signed-off-by: Pavel Hrdina <phrdina@redhat.com>
Reviewed-by: Peter Krempa <pkrempa@redhat.com>
Signed-off-by: Rafael David Tinoco <rafaeldtinoco@ubuntu.com>
---
 src/storage/storage_util.c |  3 ++
 src/util/virstoragefile.c  | 62 +++++++++++++++++++++++++++-----------
 2 files changed, 48 insertions(+), 17 deletions(-)

--- a/src/storage/storage_util.c
+++ b/src/storage/storage_util.c
@@ -3438,6 +3438,9 @@
     if (meta->capacity)
         target->capacity = meta->capacity;
 
+    if (meta->clusterSize > 0)
+        target->clusterSize = meta->clusterSize;
+
     if (encryption && meta->encryption) {
         if (meta->encryption->payload_offset != -1)
             target->capacity -= meta->encryption->payload_offset * 512;
--- a/src/util/virstoragefile.c
+++ b/src/util/virstoragefile.c
@@ -170,6 +170,8 @@
                            * or NULL if there is no COW base image, to RES;
                            * return BACKING_STORE_* */
     const struct FileEncryptionInfo *cryptInfo; /* Encryption info */
+    unsigned long long (*getClusterSize)(const char *buf,
+                                         size_t buf_size);
     int (*getBackingStore)(char **res, int *format,
                            const char *buf, size_t buf_size);
     int (*getFeatures)(virBitmapPtr *features, int format,
@@ -179,6 +181,9 @@
 
 static int cowGetBackingStore(char **, int *,
                               const char *, size_t);
+static unsigned long long
+qcow2GetClusterSize(const char *buf,
+                    size_t buf_size);
 static int qcowXGetBackingStore(char **, int *,
                                 const char *, size_t);
 static int qcow2GetFeatures(virBitmapPtr *features, int format,
@@ -191,7 +196,8 @@
 #define QCOWX_HDR_VERSION (4)
 #define QCOWX_HDR_BACKING_FILE_OFFSET (QCOWX_HDR_VERSION+4)
 #define QCOWX_HDR_BACKING_FILE_SIZE (QCOWX_HDR_BACKING_FILE_OFFSET+8)
-#define QCOWX_HDR_IMAGE_SIZE (QCOWX_HDR_BACKING_FILE_SIZE+4+4)
+#define QCOWX_HDR_CLUSTER_BITS_OFFSET (QCOWX_HDR_BACKING_FILE_SIZE+4)
+#define QCOWX_HDR_IMAGE_SIZE (QCOWX_HDR_CLUSTER_BITS_OFFSET+4)
 
 #define QCOW1_HDR_CRYPT (QCOWX_HDR_IMAGE_SIZE+8+1+1+2)
 #define QCOW2_HDR_CRYPT (QCOWX_HDR_IMAGE_SIZE+8)
@@ -314,18 +320,18 @@
 
 static struct FileTypeInfo const fileTypeInfo[] = {
     [VIR_STORAGE_FILE_NONE] = { 0, NULL, NULL, LV_LITTLE_ENDIAN,
-                                -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL },
+                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL, NULL },
     [VIR_STORAGE_FILE_RAW] = { 0, NULL, NULL, LV_LITTLE_ENDIAN,
                                -1, 0, {0}, 0, 0, 0,
                                luksEncryptionInfo,
-                               NULL, NULL },
+                               NULL, NULL, NULL },
     [VIR_STORAGE_FILE_DIR] = { 0, NULL, NULL, LV_LITTLE_ENDIAN,
-                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL },
+                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL, NULL },
     [VIR_STORAGE_FILE_BOCHS] = {
         /*"Bochs Virtual HD Image", */ /* Untested */
         0, NULL, NULL,
         LV_LITTLE_ENDIAN, 64, 4, {0x20000},
-        32+16+16+4+4+4+4+4, 8, 1, NULL, NULL, NULL
+        32+16+16+4+4+4+4+4, 8, 1, NULL, NULL, NULL, NULL
     },
     [VIR_STORAGE_FILE_CLOOP] = {
         /* #!/bin/sh
@@ -334,7 +340,7 @@
         */ /* Untested */
         0, NULL, NULL,
         LV_LITTLE_ENDIAN, -1, 0, {0},
-        -1, 0, 0, NULL, NULL, NULL
+        -1, 0, 0, NULL, NULL, NULL, NULL
     },
     [VIR_STORAGE_FILE_DMG] = {
         /* XXX QEMU says there's no magic for dmg,
@@ -342,51 +348,52 @@
          * would have to match) but then disables that check. */
         0, NULL, ".dmg",
         0, -1, 0, {0},
-        -1, 0, 0, NULL, NULL, NULL
+        -1, 0, 0, NULL, NULL, NULL, NULL
     },
     [VIR_STORAGE_FILE_ISO] = {
         32769, "CD001", ".iso",
         LV_LITTLE_ENDIAN, -2, 0, {0},
-        -1, 0, 0, NULL, NULL, NULL
+        -1, 0, 0, NULL, NULL, NULL, NULL
     },
     [VIR_STORAGE_FILE_VPC] = {
         0, "conectix", NULL,
         LV_BIG_ENDIAN, 12, 4, {0x10000},
-        8 + 4 + 4 + 8 + 4 + 4 + 2 + 2 + 4, 8, 1, NULL, NULL, NULL
+        8 + 4 + 4 + 8 + 4 + 4 + 2 + 2 + 4, 8, 1, NULL, NULL, NULL, NULL
     },
     /* TODO: add getBackingStore function */
     [VIR_STORAGE_FILE_VDI] = {
         64, "\x7f\x10\xda\xbe", ".vdi",
         LV_LITTLE_ENDIAN, 68, 4, {0x00010001},
-        64 + 5 * 4 + 256 + 7 * 4, 8, 1, NULL, NULL, NULL},
+        64 + 5 * 4 + 256 + 7 * 4, 8, 1, NULL, NULL, NULL, NULL},
 
     /* Not direct file formats, but used for various drivers */
     [VIR_STORAGE_FILE_FAT] = { 0, NULL, NULL, LV_LITTLE_ENDIAN,
-                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL },
+                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL, NULL },
     [VIR_STORAGE_FILE_VHD] = { 0, NULL, NULL, LV_LITTLE_ENDIAN,
-                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL },
+                               -1, 0, {0}, 0, 0, 0, NULL, NULL, NULL, NULL },
     [VIR_STORAGE_FILE_PLOOP] = { 0, "WithouFreSpacExt", NULL, LV_LITTLE_ENDIAN,
                                  -2, 0, {0}, PLOOP_IMAGE_SIZE_OFFSET, 0,
-                                 PLOOP_SIZE_MULTIPLIER, NULL, NULL, NULL },
+                                 PLOOP_SIZE_MULTIPLIER, NULL, NULL, NULL, NULL },
 
     /* All formats with a backing store probe below here */
     [VIR_STORAGE_FILE_COW] = {
         0, "OOOM", NULL,
         LV_BIG_ENDIAN, 4, 4, {2},
-        4+4+1024+4, 8, 1, NULL, cowGetBackingStore, NULL
+        4+4+1024+4, 8, 1, NULL, NULL, cowGetBackingStore, NULL
     },
     [VIR_STORAGE_FILE_QCOW] = {
         0, "QFI", NULL,
         LV_BIG_ENDIAN, 4, 4, {1},
         QCOWX_HDR_IMAGE_SIZE, 8, 1,
         qcow1EncryptionInfo,
-        qcowXGetBackingStore, NULL
+        NULL, qcowXGetBackingStore, NULL
     },
     [VIR_STORAGE_FILE_QCOW2] = {
         0, "QFI", NULL,
         LV_BIG_ENDIAN, 4, 4, {2, 3},
         QCOWX_HDR_IMAGE_SIZE, 8, 1,
         qcow2EncryptionInfo,
+        qcow2GetClusterSize,
         qcowXGetBackingStore,
         qcow2GetFeatures
     },
@@ -394,12 +401,12 @@
         /* https://wiki.qemu.org/Features/QED */
         0, "QED", NULL,
         LV_LITTLE_ENDIAN, -2, 0, {0},
-        QED_HDR_IMAGE_SIZE, 8, 1, NULL, qedGetBackingStore, NULL
+        QED_HDR_IMAGE_SIZE, 8, 1, NULL, NULL, qedGetBackingStore, NULL
     },
     [VIR_STORAGE_FILE_VMDK] = {
         0, "KDMV", NULL,
         LV_LITTLE_ENDIAN, 4, 4, {1, 2, 3},
-        4+4+4, 8, 512, NULL, vmdk4GetBackingStore, NULL
+        4+4+4, 8, 512, NULL, NULL, vmdk4GetBackingStore, NULL
     },
 };
 verify(G_N_ELEMENTS(fileTypeInfo) == VIR_STORAGE_FILE_LAST);
@@ -559,6 +566,24 @@
 }
 
 
+static unsigned long long
+qcow2GetClusterSize(const char *buf,
+                    size_t buf_size)
+{
+    int clusterBits = 0;
+
+    if ((QCOWX_HDR_CLUSTER_BITS_OFFSET + 4) > buf_size)
+        return 0;
+
+    clusterBits = virReadBufInt32BE(buf + QCOWX_HDR_CLUSTER_BITS_OFFSET);
+
+    if (clusterBits > 0)
+        return 1 << clusterBits;
+
+    return 0;
+}
+
+
 static int
 qcowXGetBackingStore(char **res,
                      int *format,
@@ -1046,6 +1071,9 @@
         meta->capacity *= fileTypeInfo[meta->format].sizeMultiplier;
     }
 
+    if (fileTypeInfo[meta->format].getClusterSize != NULL)
+        meta->clusterSize = fileTypeInfo[meta->format].getClusterSize(buf, len);
+
     VIR_FREE(meta->backingStoreRaw);
     if (fileTypeInfo[meta->format].getBackingStore != NULL) {
         int store = fileTypeInfo[meta->format].getBackingStore(&meta->backingStoreRaw,
